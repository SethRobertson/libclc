.\"(c) Copyright 1993 by Panagiotis Tsirigotis
.\"All rights reserved.  The file named COPYRIGHT specifies the terms
.\"and conditions for redistribution.
.\"
.\" $Id: ht.3,v 1.5 2003/06/17 05:10:51 seth Exp $
.TH HT 3X "23 April 1993"
.SH NAME
ht_create, ht_destroy, ht_insert, ht_insert_uniq, ht_delete, ht_search, ht_minimum, ht_maximum, ht_successor, ht_predecessor, ht_iterate, ht_nextobj, ht_error_reason - hash table management functions
.SH SYNOPSIS
.LP
.nf
.ft B
#include "dict.h"
#include "ht.h"
.LP
.ft B
dict_h ht_create( oo_compare, ko_compare, flags, errnop, argsp )
int (*oo_compare)( dict_obj, dict_obj ) ;
int (*ko_compare)( dict_key, dict_obj ) ;
int flags ;
int *errnop ;
struct ht_args *argsp ;
.LP
.ft B
void ht_destroy( handle )
dict_h handle ;
.LP
.ft B
int ht_insert( handle, object )
dict_h handle ;
dict_obj object ;
.LP
.ft B
int ht_insert_uniq( handle, object, objectp )
dict_h handle ;
dict_obj object ;
dict_obj *objectp ;
.LP
.ft B
int ht_delete( handle, object )
dict_h handle ;
dict_obj object ;
.LP
.ft B
dict_obj ht_search( handle, key )
dict_h handle ;
dict_key key ;
.LP
.ft B
dict_obj ht_minimum( handle )
dict_h handle ;
.LP
.ft B
dict_obj ht_maximum( handle )
dict_h handle ;
.LP
.ft B
dict_obj ht_successor( handle, object )
dict_h handle ;
dict_obj object ;
.LP
.ft B
dict_obj ht_predecessor( handle, object )
dict_h handle ;
dict_obj object ;
.LP
.ft B
dict_iter ht_iterate( handle, direction )
dict_h handle ;
enum dict_direction direction ;
.LP
.ft B
void ht_iterate_done( handle, iter )
dict_h handle ;
dict_iter iter ;
.LP
.ft B
dict_obj ht_nextobj( handle, iter )
dict_h handle ;
dict_iter iter ;
.SH DESCRIPTION
This library supports dictionary functions using hash tables.
A hash table is an array of linked lists which contain objects with the
same hash value.
.LP
.B ht_create()
supports the following flags:
.RS
.TP
.SB DICT_UNIQUE_KEYS
.TP
.SB DICT_UNORDERED
.RE
.LP
The
.I argsp
argument points to this structure:
.RS
.LP
.nf
struct ht_args
{
.RS
unsigned ht_table_entries ;
unsigned ht_bucket_entries ;
ht_func ht_objvalue ;
ht_func ht_keyvalue ;
.RE
} ;
.RE
.fi
.LP
where
.I ht_func
is defined as:
.LP
.nf
.RS
typedef ht_val (*ht_func)() ;
.RE
.fi
.LP
The
.I ht_table_entries
field determines the number of entries in the hash table.
The hash function used is a modulo function, so
in order to make sure that a proper number is used, the
.I ht_table_entries
is treated as a hint about the order of the number of entries of the table.
If it is
.B 0
then a default number of entries will be used.
Every entry in the table points to a linked list of buckets where the
objects are kept. The
.I ht_bucket_entries
field determines the number of objects in each bucket. If it is
.B 0
a default number will be used. Otherwise, it is treated as a hint
for the number of entries in each bucket.
The fields
.I ht_table_entries
and
.I ht_bucket_entries
are treated as value-result parameters. On return from this function
they will contain the actual values that will be used for this hash
table.
.LP
A hash table does not order the objects stored in it; therefore the
.I direction
argument in the
.B "ht_iterate()"
call is ignored.
Furthermore, the
.B ht_minimum(),
.B ht_maxumim(),
.B ht_successor(),
and
.B ht_predecessor()
operations can be used to enumerate the objects in a hash table but the
enumeration order is arbitrary.
.SH "SEE ALSO"
dict(3)
.SH "RETURN VALUES"
Check
.I "dict(3)"
for function return values and error codes.
