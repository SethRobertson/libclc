.\"(c) Copyright 1993 by Panagiotis Tsirigotis
.\"All rights reserved.  The file named COPYRIGHT specifies the terms
.\"and conditions for redistribution.
.\"
.\" $Id: pq.3,v 1.4 2003/11/07 15:31:21 jtt Exp $
.TH PQ 3PT "22 December 1991"
.SH NAME
pq_create, pq_destroy, pq_head, pq_extract_head, pq_insert, pq_delete, pq_error_reason - functions that manage priority queues
.SH SYNOPSIS
.LP
.nf
.ft B
#include "pq.h"
.LP
.ft B
pq_h pq_create( func, flags )
int (*func)() ;
int flags ;
.LP
.ft B
void pq_destroy( pq )
pq_h pq ;
.LP
.ft B
pq_obj pq_head( pq )
pq_h pq ;
.LP
.ft B
pq_obj pq_extract_head( pq )
pq_h pq ;
.LP
.ft B
int pq_insert( pq, object )
pq_h pq ;
pq_obj object ;
.LP
.ft B
int pq_delete( pq, object )
pq_h pq ;
pq_obj object ;
.LP
.ft B
void pq_iterate( pq )
pq_h pq ;
.LP
.ft B
dict_obj pq_nextobj( pq )
pq_h pq ;
.LP
.ft B
char *pq_error_reason( pq, errno )
pq_h pq ;
int *errnop ;
.SH DESCRIPTION
.LP
This library handles priority queues (implemented as a balanced binary
heap) that contain objects. Objects are of type
.I pq_obj
which is a pointer type.
The object at the head of a priority queue is the
.I best
object. The
user defines the ordering by providing a function that compares objects
when the priority queue is created.
.LP
.B pq_create()
creates a priority queue and returns a handle to be used for operations
on that queue. \fIfunc\fR is a pointer to a function that takes 2 objects
as arguments and returns 1 if the first object is
.I "better"
than the second and 0 otherwise. When the comparison is between an incoming
object and an existing one (as opposed to both existing), the first object
is the one incoming.
.LP
The \fIflags\fR argument is formed or ORing one or more of the following constants:
.RS
.TP
.SB PQ_THREADED_SAFE
Requests that the implementation be thread safe against multiple
threads accessing the same dictionary object at the same time.
.TP
.SB PQ_NOFLAGS
Can be used to specify no flags
.RE
.LP
.B pq_destroy()
is used to destroy a priority queue.
.LP
.B pq_head()
returns the object at the head of the priority queue O(1).
.LP
.B pq_extract_head()
extracts and returns the object at the head of the priority queue O(logN).
.LP
.B pq_insert()
inserts the given \fIobject\fR in the priority queue O(logN).
.LP
.B pq_delete()
deletes the given \fIobject\fR from the priority queue O(logN).
.LP
.B pq_iterate()
prepares the priority queue for iteration.  The iteration is not ordered. O(1)
.LP
.B pq_nextobj()
returns the next object.  It is safe to delete this object. O(1)
.LP
.B pq_error_reason()
returns the textual and numerical (if errno pointer is provided) error
message for the most recent error.
.SH "RETURN VALUES"
.LP
In the following, values for \fIpq_errno\fR will be stored in the
user-specified variable if one was provided.
.LP
.B pq_create()
returns a priority queue handle if successful, or
.SM NULL
if it fails.
Possible \fIpq_errno\fR values:
.RS
.TP 20
.SB PQ_ENOFUNC
The object comparison function is missing.
.TP
.SB PQ_ENOMEM
The program ran out of memory.
.RE
.LP
.B pq_insert()
returns \fBPQ_OK\fR if successful and \fBPQ_ERR\fR if it fails.
Possible \fIpq_errno\fR values:
.RS
.TP 20
.SB PQ_ENULLOBJECT
The object value is
.SM NULL.
.TP
.SB PQ_ENOMEM
The program ran out of memory.
.RE
.LP
.B pq_head()
returns the object at the head of the queue or
.SM NULL
if the queue is empty.
.LP
.B pq_extract_head()
returns the object at the head of the queue or
.SM NULL
if the queue is empty.
.LP
.B pq_delete()
returns \fBPQ_OK\fR if successful and \fBPQ_ERR\fR if it fails.
Possible \fIpq_errno\fR values:
.RS
.TP 20
.SB PQ_ENULLOBJECT
The object value is
.SM NULL.
.TP
.SB PQ_ENOTFOUND
The object is not in the queue.
.LP
.B pq_nextobj()
returns the next object
.SM NULL
if the queue has been completely iterated.
.SH BUGS
.LP
The iterator is not safe to use in either a threaded or non-threaded
environment if objects are being deleted (other than the object that
this one specific iterator is on when no other iterators are in use
for this pq) or inserted.  Using the iterator when an object is
inserted/deleted might cause objects to be skipped or selected twice.
